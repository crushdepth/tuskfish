DEV STATUS
==========
The purpose of this file is so I can keep track of what I was last working on, and what I need to do.

MINIMUM FUNCTIONALITY
=====================
* Review error handling policy: Some fatal triggered errors could be handled as warnings + log;
  other user-side ones eg. in control scripts may be better just to redirect to a polite error
  warning page.
  - See PDO tutorial notes about correct handling of PDO errors; try/catch is not required if you set the error mode properly.
  - Collections should clean up parental references from child objects on deletion.

= 0.5 days.

RELEASE FUNCTIONALITY
=====================
* Write a simple manual providing installation and usage guide, and overview of the architecture
  with examples of how to build controller scripts, templates and work with criteria. 1 week.

= 1 week.

WHERE I LEFT OFF
================
* Detail the data entry form

OPTIMISATION / CONSOLIDATION
============================
* Rationalise file paths, especially for templates.
* Final security audit on the code.
  - Check file path constraints.
* Reorder methods so that public/private are paired.

POLISH
======
The following things need to be added to make it attractive to the great unwashed public:
* Shiny AJAXified file uploader (have, but add rotational controls as it doesn't like portrait layout).
* Data entry/edit forms improve spacing of elements, especially on folding the layout.
* Teaser block.
* Spotlight block.
* Image block.

THINGS THAT NEED TO CHANGE FOR PRODUCTION CODE
==============================================
* Set UTF-8 as the default charset in php.ini.
* Logger needs echoing of error messages to screen commented out.
* Logger needs to return FALSE otherwise trigger_error() will not stop script execution (in dev mode, it's handy to let the script keep going to get context).
* Uncomment the section of the installation script that deletes the installation script.

On a development server just turn displaying errors on:

ini_set('display_errors', 1);
While on a production server turn displaying errors off while logging errors on:

ini_set('display_errors', 0);
ini_set('log_errors', 1);

Set PDO in exception mode.
Do not use try..catch to report errors.
Configure PHP for proper error reporting
on a live site set display_errors=off and log_errors=on
on a development site, you may want to set display_errors=on
of course, error_reporting has to be set to E_ALL in both cases