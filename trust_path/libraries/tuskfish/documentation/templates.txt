TEMPLATES
=========
* Theme-level templates can be dynamically assigned to pages by overriding the default.
* Theme-level CSS can (and are) changed on the fly according to theme. This allows control over
  most things but not the *layout* of individual content objects.
* Object-level templates can be dynamically assigned by overriding the default.
* Template rendering can be done generically by the TfishTemplate class, or more specifically by
  using an object-specific template class.
* At present, the template engine can't handle arrays, it only works with string output.
* Template rendering is currently handled by the TfishTemplate object.
* Template concatenation is currently handled by the TfishTemplate object.
* Scenario: Have an array of different kinds of content objects. How to render them all with the
  appropriate templates?

/**
 * Prepare templates for the main content area of the page. The way it works is like this:
 * 
 * 1. A template object ($tfish_template) is instantiated in the header so it globally available.
 * 2. Assign any variables you want to be available in the templates to $tfish_template, eg:
 * 
 * $tfish_template->page_title = 'Articles';
 * $tfish_template->articles = articles; // Array of article objects.
 * 
 * 3. Templates for content objects live in the /templates/objects directory. Convention: Create
 * one template for displaying a single object (eg. 'article.html') and another for displaying an
 * index of multiple objects (eg. 'articles.html').
 * 
 * 3. When you are ready to process/display a template, call render() specifying the template
 * that you want to process, and assigning it to a variable that will be used to position it in the
 * top level layout file. Note that render() calls extract() on template object variables, which
 * is how they become available for use in the layout file.
 * 
 * $tfish_template->tfish_main_content = $tfish_template->render('articles');
 * 
 * Note that you can create as many templates as you want and position them wherever you like in
 * the layout file. You can therefore create as many 'zones' in the layout as you want, just by
 * echoing the rendered template vaiable.
 * 
 * 4. You can nest templates inside one another simply by assigning a rendered template as a
 * variable to another. This means that you have to prepare the sub-templates before rendering
 * their parents.
 * 
 */

RESERVED TEMPLATE POSITIONS
===========================
The following 'zones' are commonly used in layout files, so these names are candidates for being
'standardised' positions in layouts:
* top_strip
* logo
* banner
* navigation
* search
* menu
* left_column
* right_column
* footer
